{"version":3,"file":"static/js/682.2fc739d7.chunk.js","mappings":"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","sources":["components/modules/auth/RegisterForm/validation.ts","components/modules/auth/RegisterForm/index.tsx","pages/RegisterPage/index.tsx"],"sourcesContent":["import * as yup from 'yup';\n\nexport const registerSchema = yup.object({\n  name: yup\n    .string()\n    .min(2, 'Must be more than 2 characters')\n    .max(40, 'Must be less than 40 characters')\n    .matches(\n      /^[A-Za-zА-Яа-яЁёҐґІіЇїЄє\\s,'\"'-.]+(?:\\s+[A-Za-zА-Яа-яЁёҐґІіЇїЄє]+){0,3}$/u,\n      'Not a valid name'\n    )\n    .required('Name is required'),\n  email: yup\n    .string()\n    .min(7, 'Must be more than 7 characters')\n    .max(63, 'Must be less than 63 characters')\n    .email(\n      'minimum 2 characters before @, cannot start with a dash, only Latin letters'\n    )\n    .required('Email is required')\n    .matches(\n      /^(?!-)[\\w.-]{2,}@[\\w-]+(\\.[\\w-]+)*\\.[a-zA-Z]{2,}$/u,\n      'minimum 2 characters before @, cannot start with a dash, only Latin letters'\n    ),\n  password: yup\n    .string()\n    .required('Password is required')\n    .max(32, 'Must be less than 32 characters')\n    .matches(\n      /(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#$%^&*_]{7,}/,\n      'The password must contain uppercase and lowercase letters, at least 7 symbols'\n    ),\n});\n","import {\n  Paper,\n  Typography,\n  styled,\n  Grid,\n  TextField,\n  Button,\n} from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { registerSchema } from './validation';\n\nconst FormPaper = styled(Paper)(({ theme }) => ({\n  maxWidth: '500px',\n  width: '100%',\n  height: 'fit-content',\n  padding: '32px',\n}));\n\nconst ErrorText = ({ error }: { error: string | undefined }) => {\n  return (\n    <Typography\n      sx={{ position: 'absolute', top: '100%', fontSize: '0.75rem' }}\n      color='error'\n    >\n      {error}\n    </Typography>\n  );\n};\n\nexport const RegisterForm = () => {\n  const {\n    register,\n    handleSubmit,\n    // reset,\n    formState: { errors },\n  } = useForm({\n    defaultValues: {\n      name: '',\n      email: '',\n      password: '',\n    },\n    resolver: yupResolver(registerSchema),\n    mode: 'onTouched',\n  });\n\n  const onSubmit = handleSubmit((data) => {\n    console.log(data);\n  });\n\n  return (\n    <FormPaper>\n      <Grid component='form' onSubmit={onSubmit}>\n        <Typography variant='h5' component='h2' mb={4}>\n          Registration\n        </Typography>\n        <Grid container direction='column' rowGap={4} mb={6}>\n          <Grid sx={{ position: 'relative' }}>\n            <TextField\n              label='Name'\n              autoComplete='username'\n              {...register('name', { required: 'Name is required' })}\n              fullWidth\n            />\n            {errors?.name && <ErrorText error={errors.name.message} />}\n          </Grid>\n          <Grid sx={{ position: 'relative' }}>\n            <TextField\n              label='Email'\n              autoComplete='email'\n              {...register('email')}\n              fullWidth\n            />\n\n            {errors?.email && <ErrorText error={errors.email.message} />}\n          </Grid>\n          <Grid sx={{ position: 'relative' }}>\n            <TextField\n              type='password'\n              label='Password'\n              autoComplete='current-password'\n              {...register('password')}\n              fullWidth\n            />\n            {errors?.password && <ErrorText error={errors.password.message} />}\n          </Grid>\n        </Grid>\n        <Button\n          type='submit'\n          variant='contained'\n          size='large'\n          sx={{ width: '100%' }}\n        >\n          Sign up\n        </Button>\n      </Grid>\n    </FormPaper>\n  );\n};\n","import { RegisterForm } from 'components/modules/auth/RegisterForm';\n\nfunction RegisterPage() {\n  return <RegisterForm />;\n}\n\nexport default RegisterPage;\n"],"names":["registerSchema","yup","name","min","max","matches","required","email","password","FormPaper","styled","Paper","_ref","theme","maxWidth","width","height","padding","ErrorText","_ref2","error","_jsx","Typography","sx","position","top","fontSize","color","children","RegisterForm","_useForm","useForm","defaultValues","resolver","yupResolver","mode","register","handleSubmit","errors","formState","onSubmit","data","console","log","_jsxs","Grid","component","variant","mb","container","direction","rowGap","TextField","_objectSpread","label","autoComplete","fullWidth","message","type","Button","size"],"sourceRoot":""}