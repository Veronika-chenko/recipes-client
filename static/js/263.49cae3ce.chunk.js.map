{"version":3,"file":"static/js/263.49cae3ce.chunk.js","mappings":"yQAEaA,EAAcC,EAAAA,GAAW,CACpCC,MAAOD,EAAAA,KAEJE,IAAI,EAAG,kCACPC,IAAI,GAAI,mCACRF,MACC,+EAEDG,SAAS,qBACTC,QACC,yFACA,+EAEJC,SAAUN,EAAAA,KAEPI,SAAS,wBACTD,IAAI,GAAI,mCACRE,QACC,iDACA,mF,SCTAE,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,EAAc,SAAAE,GAAQA,EAALC,MAAK,MAAQ,CAC9CC,MAAO,QACPC,OAAQ,cACRC,QAAS,OACV,IAEKC,EAAY,SAAHC,GAAkD,IAA5CC,EAAKD,EAALC,MACnB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACTC,GAAI,CAAEC,SAAU,WAAYC,IAAK,OAAQC,SAAU,WACnDC,MAAM,QAAOC,SAEZR,GAGP,EAEaS,EAAY,WACvB,IAAAC,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,cAAe,CACb5B,MAAO,GACPK,SAAU,IAEZwB,UAAUC,EAAAA,EAAAA,GAAYhC,GACtBiC,KAAM,cAVNC,EAAQN,EAARM,SACAC,EAAYP,EAAZO,aAEaC,EAAMR,EAAnBS,UAAaD,OAUTE,EAAWH,GAAa,SAACI,GAC7BC,QAAQC,IAAIF,EACd,IAEA,OACEpB,EAAAA,EAAAA,KAACX,EAAS,CAAAkB,UACRgB,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACC,UAAU,OAAON,SAAUA,EAASZ,SAAA,EACxCP,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAACyB,QAAQ,KAAKD,UAAU,KAAKE,GAAI,EAAEpB,SAAC,kBAG/CgB,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACI,WAAS,EAACC,UAAU,SAASC,OAAQ,EAAGH,GAAI,EAAEpB,SAAA,EAClDgB,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACtB,GAAI,CAAEC,SAAU,YAAaI,SAAA,EACjCP,EAAAA,EAAAA,KAAC+B,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACRC,MAAM,QACNC,aAAa,SACTnB,EAAS,UAAQ,IACrBoB,WAAS,MAGJ,OAANlB,QAAM,IAANA,OAAM,EAANA,EAAQlC,SAASiB,EAAAA,EAAAA,KAACH,EAAS,CAACE,MAAOkB,EAAOlC,MAAMqD,cAEnDb,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAACtB,GAAI,CAAEC,SAAU,YAAaI,SAAA,EACjCP,EAAAA,EAAAA,KAAC+B,EAAAA,GAASC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACRK,KAAK,WACLJ,MAAM,WACNC,aAAa,oBACTnB,EAAS,aAAW,IACxBoB,WAAS,MAEJ,OAANlB,QAAM,IAANA,OAAM,EAANA,EAAQ7B,YAAYY,EAAAA,EAAAA,KAACH,EAAS,CAACE,MAAOkB,EAAO7B,SAASgD,iBAG3DpC,EAAAA,EAAAA,KAACsC,EAAAA,EAAM,CACLD,KAAK,SACLX,QAAQ,YACRa,KAAK,QACLrC,GAAI,CAAER,MAAO,QAASa,SACvB,gBAMT,ECjFA,MAJA,WACE,OAAOP,EAAAA,EAAAA,KAACQ,EAAS,GACnB,C","sources":["components/modules/auth/LoginForm/validation.ts","components/modules/auth/LoginForm/index.tsx","pages/LoginPage/index.tsx"],"sourcesContent":["import * as yup from 'yup';\n\nexport const loginSchema = yup.object({\n  email: yup\n    .string()\n    .min(7, 'Must be more than 7 characters')\n    .max(63, 'Must be less than 63 characters')\n    .email(\n      'minimum 2 characters before @, cannot start with a dash, only Latin letters'\n    )\n    .required('Email is required')\n    .matches(\n      /^(?!-)[\\w.-]{2,}@[\\w-]+(\\.[\\w-]+)*\\.[a-zA-Z]{2,}$/u,\n      'minimum 2 characters before @, cannot start with a dash, only Latin letters'\n    ),\n  password: yup\n    .string()\n    .required('Password is required')\n    .max(32, 'Must be less than 32 characters')\n    .matches(\n      /(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z!@#$%^&*_]{7,}/,\n      'The password must contain uppercase and lowercase letters, at least 7 symbols'\n    ),\n});\n","import {\n  Paper,\n  Typography,\n  styled,\n  Grid,\n  TextField,\n  Button,\n} from '@mui/material';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { loginSchema } from './validation';\n\nconst FormPaper = styled(Paper)(({ theme }) => ({\n  width: '500px',\n  height: 'fit-content',\n  padding: '32px',\n}));\n\nconst ErrorText = ({ error }: { error: string | undefined }) => {\n  return (\n    <Typography\n      sx={{ position: 'absolute', top: '100%', fontSize: '0.75rem' }}\n      color='error'\n    >\n      {error}\n    </Typography>\n  );\n};\n\nexport const LoginForm = () => {\n  const {\n    register,\n    handleSubmit,\n    // reset,\n    formState: { errors },\n  } = useForm({\n    defaultValues: {\n      email: '',\n      password: '',\n    },\n    resolver: yupResolver(loginSchema),\n    mode: 'onTouched',\n  });\n\n  const onSubmit = handleSubmit((data) => {\n    console.log(data);\n  });\n\n  return (\n    <FormPaper>\n      <Grid component='form' onSubmit={onSubmit}>\n        <Typography variant='h5' component='h2' mb={4}>\n          Registration\n        </Typography>\n        <Grid container direction='column' rowGap={4} mb={6}>\n          <Grid sx={{ position: 'relative' }}>\n            <TextField\n              label='Email'\n              autoComplete='email'\n              {...register('email')}\n              fullWidth\n            />\n\n            {errors?.email && <ErrorText error={errors.email.message} />}\n          </Grid>\n          <Grid sx={{ position: 'relative' }}>\n            <TextField\n              type='password'\n              label='Password'\n              autoComplete='current-password'\n              {...register('password')}\n              fullWidth\n            />\n            {errors?.password && <ErrorText error={errors.password.message} />}\n          </Grid>\n        </Grid>\n        <Button\n          type='submit'\n          variant='contained'\n          size='large'\n          sx={{ width: '100%' }}\n        >\n          Sign In\n        </Button>\n      </Grid>\n    </FormPaper>\n  );\n};\n","import { LoginForm } from 'components/modules/auth/LoginForm';\n\nfunction LoginPage() {\n  return <LoginForm />;\n}\n\nexport default LoginPage;\n"],"names":["loginSchema","yup","email","min","max","required","matches","password","FormPaper","styled","Paper","_ref","theme","width","height","padding","ErrorText","_ref2","error","_jsx","Typography","sx","position","top","fontSize","color","children","LoginForm","_useForm","useForm","defaultValues","resolver","yupResolver","mode","register","handleSubmit","errors","formState","onSubmit","data","console","log","_jsxs","Grid","component","variant","mb","container","direction","rowGap","TextField","_objectSpread","label","autoComplete","fullWidth","message","type","Button","size"],"sourceRoot":""}